Create a new branch called f-sql
Create a file called Sakila_Project.sql

Sakila Database

Write a SQL statement for each of the following. 

1. Get 10 cities in descending alphabetical order.

SELECT city 
FROM sakila.city
ORDER BY city DESC
LIMIT 10;

2. Get all films with "airplane" in the title.

SELECT * FROM sakila.film
WHERE title LIKE '%airplane%';


3. Get the highest payment amount.

SELECT max(amount) 
FROM sakila.payment;

4. Get the number of records in the customer table for store id #1.

SELECT * FROM sakila.customer
WHERE store_id = 1;

5. Get all payment records for customer with email address "NANCY.THOMAS@sakilacustomer.org"

SELECT * FROM sakila.customer
WHERE email LIKE "NANCY.THOMAS@sakilacustomer.org";

6. Use a View to get the film info for actor Bob Fawcett.

SELECT * FROM sakila.actor_info
WHERE first_name LIKE 'BOB' AND last_name LIKE 'FAWCETT';

7. Use a Stored Procedure to get the 4 inventory ids for the film "Alien Center" at Store #2.

set @p_film_count = 0;
call sakila.film_in_stock(15, 2, @p_film_count);
select *;

8. Insert a new store. Ensure that you use TRANSACTION. (This one is possible but it's tough! Pay attention to constraints and the order that you are inserting data.) 

INSERT INTO sakila.store(store_id,manager_staff_id,address_id,last_update) VALUES
(3,5,5,current_timestamp());


INSERT INTO sakila.staff(staff_id,first_name,last_name,address_id,store_id,active,username,last_update) VALUES
(5,"Adrian","Alba",5,3,1,"Adrian1020",current_timestamp());

INSERT INTO sakila.store(store_id,manager_staff_id,address_id,last_update) VALUES
(3,5,5,current_timestamp());

Note: Still working on this one.

9. Update the timestamp to the current date/time for the new store you entered in the previous question.

UPDATE store SET last_update = current_timestamp()
WHERE store_id = 3;

10. Delete the new store.

DELETE FROM sakila.store 
WHERE store_id = 3;

11. Using one SQL statement, get how many films are there in each rating category.

*Note: You would change this statement to match every rating and it would give me a count for all movies with that rating. This
doesn't give you all ratings in 1 statement, but I am not sure if I'll have time before given deadline. I will come back to this

SELECT COUNT(rating) AS PG FROM sakila.film
WHERE rating = 'PG';


SELECT COUNT(rating) AS PG,COUNT(rating) AS G FROM sakila.film
WHERE rating = 'PG' AND rating = 'G';

12. Get (in order) the first and last names of the 3 customers who have spent the most, along with how much they have paid overall.

SELECT first_name, last_name, amount
FROM customer, payment
WHERE customer.customer_id = payment.customer_id
ORDER BY amount DESC
LIMIT 3;

13. Get all movies rented by the customer who spent the most. (Hint: This will either require nested queries, or more than two joins. one approach is much shorter than the other.)

14. Get the first and last names of all customers who spent more than $150, along with how much they spent.

SELECT customer.customer_id, 
payment.amount,
first_name,
last_name,
SUM(amount) OVER (PARTITION BY customer_id) AS CustomerTotal
FROM payment, customer
WHERE customer.customer_id = payment.customer_id;

Do not hard code IDs.

https://dev.mysql.com/doc/sakila/en/sakila-introduction.html

Schema Diagram:
https://www.jooq.org/sakila#:~:text=The%20Sakila%20database%20is%20a,films%2C%20stores%2C%20and%20rentals.
